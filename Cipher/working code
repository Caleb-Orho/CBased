/*
 Student Name: Caleb Orhomre
 Assignment 2.
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdlib.h>

// char cipherText[] = "LAD SJ-39 CFS EQYYT FQLPNFLZO, ZW LAFL CADW F YDLLDM RDT CFS UMDSSDV, LAD UYFZW FWV OZUADM YDLLDMS CDMD UMZWLDV PW SDUFMFLD UFUDM LFUDS, VZKZVDV ZWLP EPQM- PM EZKD-YDLLDM JMPQUS. LAD PQLUQLLDV OAFMFOLDM";

char cipherText[] = "VGG LVNG DH IDADIYI DUBP BSJYY OVJBH PUY PC KSDFS BSY TYGLVY DUSVTDB BSY VZNDBVUD VUPBSYJ BSPHY KSP DU BSYDJ PKU GVULNVLY VJY FVGGYI FYGBH DU PNJ LVNGH BSY BSDJI VGG BSYHY IDCCYJ CJPX YVFS PBSYJ DU GVULNVLY FNHBPXH VUI GVKH BSY JDAYJ LVJPUUY";

int charFreq[26] = {0}; // Used to store the occurence of each letter.

int *alphaSort[26] = {'\0'}; // Contains the address of the most frequently element.

void doFrequencyAnalysis(char *, int *);
void sortFrequencyAddresses(int **, int *);
void displayFrequencyAnalysis(int **);
void sort(int, int *);
void swapCipherTextChars(char *);

int main(void)
{
    for (int i = 0; i < strlen(cipherText); i++)
        printf("%c", *(cipherText + i));

    printf("\n\n");

    doFrequencyAnalysis(cipherText, charFreq);
    sortFrequencyAddresses(alphaSort, charFreq);
    displayFrequencyAnalysis(alphaSort);
    swapCipherTextChars(cipherText);
}

/*
    This method is used to perform frequency analysis.
*/
void doFrequencyAnalysis(char *cipher_Text, int *char_Freq)
{

    // Setting all the values in cipher text to 0.
    for (int i = 0; i < strlen(cipher_Text); i++)
        (*(char_Freq + ((*(cipher_Text + i)) - 'A'))) = 0;

    // Looping through every character in the cipher text char array.
    for (int i = 0; i < strlen(cipher_Text); i++)
    {
        // Finding the position that needs to be incremented.
        int letter = (*(cipher_Text + i)) - 'A';

        // Incrementing the postion in the char frequency array.
        (*(char_Freq + letter))++;
    }
}

typedef struct testtee
{
    int origpos;
    int freq;

} FRecord;

FRecord records[26];

int qSort(const void *p1, const void *p2)
{
    FRecord *a = (FRecord *)p1;
    FRecord *b = (FRecord *)p2;

    return (b->freq - a->freq);
}
/*
    This method copies required information form char frequency into the array fr, and sorts the array, then copies the addressed into the alpha sort array.
*/
void sortFrequencyAddresses(int **alpha_Sort, int *char_Freq)
{
    // For loop to get the char frequency elements, and svaing it into the origpos variable.
    for (int i = 0; i < 26; i++)
    {
        (records + i)->origpos = i;
        (records + i)->freq = *(charFreq + i); // charFreq[i];
    }

    // printf("Before sorting\n");
    // for (int i = 0; i < 26; i++)
    //     printf("%d ", (fr + i)->freq);
    // printf("\n");

    // for (int i = 0; i < 26; i++)
    //     printf("%d ", (fr + i)->origpos);
    // printf("\n\n");

    // Using qSort to sort the fr varible elements.
    qsort(records, 26, sizeof(FRecord), qSort);

    // printf("After sorting\n");
    // for (int i = 0; i < 26; i++)
    //     printf("%d ", (fr + i)->freq);
    // printf("\n");

    // for (int i = 0; i < 26; i++)
    //     printf("%d ", (fr + i)->origpos);
    // printf("\n\n");

    // Copying the addresss of the sorted array element into alpha sort.
    for (int i = 0; i < 26; i++)
    {
        (*(alpha_Sort + i)) = &char_Freq[(records + i)->origpos];
    }
}

/*
    This method display the frequency analysis.
*/
void displayFrequencyAnalysis(int **alpha_Sort)
{
    // These two variables are used to format the output.
    int spAces = 0;
    char forMat;

    printf("Frequency analysis: \n");
    for (int i = 0; i < 26; i++)
    {
        // Getting the character.
        int letter = ((*(alpha_Sort + i)) - charFreq) + 'A';

        forMat = (spAces == 4) ? '\n' : '\t';

        spAces %= 4, spAces++;

        // Printing out requried information.
        printf("%c: %u %c", letter, (records + i)->freq, forMat);
    }

    printf("\n");
}

/*
    This method is used to swap two cipher chars.
    This method just swap the characters occurence i.e A occured 12, B occured 2.
    After this method runs B occured 12, A occured 2.
*/
void swapCipherTextChars(char *cipher_Text)
{
    // While loop to loop the whole program again.
    while (1)
    {
        // Variables that holds the chars to be swaped.
        char sub, swap;

        printf("Enter char to substitute: ");
        scanf(" %c", &sub);

        printf("Swap this with character: ");
        scanf(" %c", &swap);

        for (int i = 0; i < strlen(cipherText); i++)
        {
            if (cipherText[i] == sub)
                *(cipherText + i) = swap;

            else if (cipherText[i] == swap)
                *(cipherText + i) = sub;
        }

        doFrequencyAnalysis(cipherText, charFreq);
        sortFrequencyAddresses(alphaSort, charFreq);
        displayFrequencyAnalysis(alphaSort);

        for (int i = 0; i < strlen(cipherText); i++)
            printf("%c", *(cipherText + i));

        printf("\n\n");

        fflush(stdin);
    }
}



// char cipherText[] = "VGG LVNG DH IDADIYI DUBP BSJYY OVJBH PUY PC KSDFS BSY TYGLVY DUSVTDB BSY VZNDBVUD VUPBSYJ BSPHY KSP DU BSYDJ PKU GVULNVLY VJY FVGGYI FYGBH DU PNJ LVNGH BSY BSDJI VGG BSYHY IDCCYJ CJPX YVFS PBSYJ DU GVULNVLY FNHBPXH VUI GVKH BSY JDAYJ LVJPUUY";